name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run typecheck

      - name: Run tests
        run: npm run test

      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          NODE_ENV=${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }} npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: dist/

  deploy-firebase:
    name: Deploy to Firebase
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: dist/

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase
        run: |
          cd dist
          firebase use ${{ github.event.inputs.environment || 'development' }}
          firebase deploy --only hosting,firestore,storage,functions
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  deploy-server:
    name: Deploy Server
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'development' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: dist/

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          # Add server to known hosts
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts

          # Set deployment target based on environment
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            DEPLOY_TARGET="${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }}:${{ secrets.PROD_SERVER_PATH }}"
          elif [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            DEPLOY_TARGET="${{ secrets.STAGING_SERVER_USER }}@${{ secrets.STAGING_SERVER_HOST }}:${{ secrets.STAGING_SERVER_PATH }}"
          else
            DEPLOY_TARGET="${{ secrets.DEV_SERVER_USER }}@${{ secrets.DEV_SERVER_HOST }}:${{ secrets.DEV_SERVER_PATH }}"
          fi

          # Archive the build
          cd dist
          tar -czf ../deploy.tar.gz .

          # Copy to server and extract
          scp ../deploy.tar.gz ${DEPLOY_TARGET}/deploy.tar.gz
          ssh ${DEPLOY_TARGET%%:*} "cd ${DEPLOY_TARGET#*:} && tar -xzf deploy.tar.gz && rm deploy.tar.gz && npm install --production && pm2 restart ai-agent-generator || pm2 start dist/server/index.js --name ai-agent-generator"

  notify:
    name: Send notifications
    needs: [deploy-firebase, deploy-server]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest

    steps:
      - name: Check workflow status
        id: check
        run: |
          if [[ "${{ needs.deploy-firebase.result }}" == "success" && "${{ needs.deploy-server.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification on success
        if: steps.check.outputs.status == 'success'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "✅ Deployment successful to ${{ github.event.inputs.environment || 'development' }} environment!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *Deployment successful!*\n\nEnvironment: *${{ github.event.inputs.environment || 'development' }}*\nCommit: ${{ github.sha }}\nDeployed by: ${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack notification on failure
        if: steps.check.outputs.status == 'failure'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "❌ Deployment failed for ${{ github.event.inputs.environment || 'development' }} environment!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ *Deployment failed!*\n\nEnvironment: *${{ github.event.inputs.environment || 'development' }}*\nCommit: ${{ github.sha }}\nTriggered by: ${{ github.actor }}\n\nCheck the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
